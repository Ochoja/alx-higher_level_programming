===============================
 Doctest for 4-print_square.py
===============================

``print_square(size)`` Prints a square where sides equals
`size`. An error is raised if this value is not a valid integer


 Import
==========
>>> print_square = __import__('4-print_square').print_square


 Print square
===============
>>> print_square(2)
##
##


 Print square
==============
>>> print_square(4)
####
####
####
####


 No size
=========
>>> print_square(0)


 Pass Float
============
>>> print_square(2.3)
Traceback (most recent call last):
	  ...
TypeError: size must be an integer


 Negative int
================
>>> print_square(-3)
Traceback (most recent call last):
	  ...
ValueError: size must be >= 0


 Negative float
=================
>>> print_square(-3.5)
Traceback (most recent call last):
	  ...
TypeError: size must be an integer



==================
 Other Data Types
==================

 String
========
>>> print_square("String")
Traceback (most recent call last):
          ...
TypeError: size must be an integer


 List
========
>>> print_square([2, 3, 9])
Traceback (most recent call last):
          ...
TypeError: size must be an integer


 Tuple
========
>>> print_square((3, 5, 6))
Traceback (most recent call last):
          ...
TypeError: size must be an integer


 Set
========
>>> print_square({"Food", "Workout"})
Traceback (most recent call last):
          ...
TypeError: size must be an integer


 Dictionary
============
>>> print_square({"value": "String"})
Traceback (most recent call last):
          ...
TypeError: size must be an integer
